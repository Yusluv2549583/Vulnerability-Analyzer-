import os
import tensorflow as tf
from tensorflow.keras.preprocessing.sequence import pad_sequences
import pickle
from flask import Flask, request, jsonify, render_template
from scanner import sql_injection_scan  # Import the scanner function

app = Flask(__name__)

def load_model_and_tokenizer():
    # model = tf.keras.models.load_model('/Users/USER/Desktop/Yussuf/Vulnerability-Analyzer-/manual/models/model.h5')
    # with open('C:/Users/USER/Desktop/Yussuf/Vulnerability-Analyzer-/manual/models/tokenizer.pickle', 'rb') as handle:
    #     tokenizer = pickle.load(handle)
    # return model, tokenizer

    try:
        model = tf.keras.models.load_model('model.h5')
        # /Users/USER/Desktop/Yussuf/Vulnerability-Analyzer-/manual/models
        with open('tokenizer.pickle', 'rb') as handle:
            # C:/Users/USER/Desktop/Yussuf/Vulnerability-Analyzer-/manual/models
            tokenizer = pickle.load(handle)
        return model, tokenizer
    except Exception as e:
        # print(f"Error loading model or tokenizer: {e}")
        render_template('500.html', error='Error loading model or tokenizer'), 500
        raise

model, tokenizer = load_model_and_tokenizer()

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/scan', methods=['POST'])
def scan():
    url = request.form.get('url')
    if not url:
        # return jsonify({'error': 'URL is required'}), 400
        return render_template('400.html'), 400

    # forms = sql_injection_scan(url)
    try:
        forms = sql_injection_scan(url)
    # except request .RequestException as e:
    #     return jsonify({'error': 'Network error: ' + str(e)}), 503
    except Exception as e:
        # return jsonify({'error': 'Error fetching forms: ' + str(e)}), 500
        return render_template('500.html', error='Error fetching forms: ' + str(e)), 500

    if not isinstance(forms, list):  # Validate schema
        # return jsonify({'error': 'Invalid schema received from scanner'}), 500
        return render_template('500.html', error='Invalid schema received from scanner'), 500
    
    results = []

    for form in forms:
        form_result = {
            "action": form["action"],
            "method": form["method"],
            "inputs": []
        }

        for input_detail in form["inputs"]:
            input_text = input_detail["value"]
            if input_text is None:
                form_result["inputs"].append({
                    "name": input_detail["name"],
                    "value": input_text,
                    "vulnerable": False,
                    "error": "Input text is None"
                })
                continue

            try:
                sequences = tokenizer.texts_to_sequences([input_text])
                padded_sequences = pad_sequences(sequences, maxlen=model.input_shape[1], padding='post')
                prediction = model.predict(padded_sequences)
                vulnerability = bool(prediction[0][0] > 0.5)  # Convert to Python bool
                form_result["inputs"].append({
                    "name": input_detail["name"],
                    "value": input_text,
                    "vulnerable": vulnerability
                })
            except Exception as e:
                form_result["inputs"].append({
                    "name": input_detail["name"],
                    "value": input_text,
                    "vulnerable": False,
                    "error": str(e)
                })

        form_result["form_vulnerable"] = form["vulnerable"]
        results.append(form_result)

    # return jsonify(results)
    return render_template('scan_results.html', results=results, url=url)


# Custom error handlers
@app.errorhandler(404)
def not_found_error(error):
    return render_template('404.html'), 404

@app.errorhandler(500)
def internal_error(error):
    return render_template('500.html'), 500

@app.errorhandler(400)
def bad_request_error(error):
    return render_template('400.html'), 400

@app.errorhandler(503)
def service_unavailable_error(error):
    return render_template('503.html'), 503

# Add more error handlers as needed



if __name__ == '__main__':
    host = os.environ.get('HOST', '0.0.0.0')  # Default to '0.0.0.0' if HOST is not set
    port = int(os.environ.get('PORT', 5000))  # Default to 5000 if PORT is not set
    app.run(debug=False, host=host, port=port)
