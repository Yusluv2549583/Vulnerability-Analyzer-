import tensorflow as tf
from tensorflow.keras.preprocessing.sequence import pad_sequences
import pickle
from flask import Flask, request, jsonify, render_template
from scanner import sql_injection_scan  # Import the scanner function

app = Flask(__name__)

def load_model_and_tokenizer():
    model = tf.keras.models.load_model('/Users/USER/Desktop/School/yusluv/manual/models/model.h5')
    with open('/Users/USER/Desktop/School/yusluv/manual/models/tokenizer.pickle', 'rb') as handle:
        tokenizer = pickle.load(handle)
    return model, tokenizer

model, tokenizer = load_model_and_tokenizer()

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/scan', methods=['POST'])
def scan():
    url = request.form.get('url')
    if not url:
        return jsonify({'error': 'URL is required'}), 400

    forms = sql_injection_scan(url)
    results = []

    for form in forms:
        form_result = {
            "action": form["action"],
            "method": form["method"],
            "inputs": []
        }

        for input_detail in form["inputs"]:
            input_text = input_detail["value"]
            if input_text is None:
                form_result["inputs"].append({
                    "name": input_detail["name"],
                    "value": input_text,
                    "vulnerable": False,
                    "error": "Input text is None"
                })
                continue

            try:
                sequences = tokenizer.texts_to_sequences([input_text])
                padded_sequences = pad_sequences(sequences, maxlen=model.input_shape[1], padding='post')
                prediction = model.predict(padded_sequences)
                vulnerability = bool(prediction[0][0] > 0.5)  # Convert to Python bool
                form_result["inputs"].append({
                    "name": input_detail["name"],
                    "value": input_text,
                    "vulnerable": vulnerability
                })
            except Exception as e:
                form_result["inputs"].append({
                    "name": input_detail["name"],
                    "value": input_text,
                    "vulnerable": False,
                    "error": str(e)
                })

        form_result["form_vulnerable"] = form["vulnerable"]
        results.append(form_result)

    return jsonify(results)

if __name__ == '__main__':
    app.run(debug=True)
