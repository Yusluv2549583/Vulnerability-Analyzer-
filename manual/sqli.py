import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin
import logging
import random

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger()

user_agents = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
    # Add more User-Agents here
]

class SQLInjectionScanner:
    def __init__(self, url):
        self.url = url
        self.session = requests.Session()
        self.session.headers["User-Agent"] = random.choice(user_agents)
    
    def get_forms(self):
        try:
            response = self.session.get(self.url)
            response.raise_for_status()
        except requests.exceptions.RequestException as e:
            logger.error(f"Error fetching {self.url}: {e}")
            return []
        
        soup = BeautifulSoup(response.content, "html.parser")
        return soup.find_all("form")
    
    def form_details(self, form):
        form_details = {}
        action = form.attrs.get("action")
        method = form.attrs.get("method", "get").lower()
        inputs = []

        for input_tag in form.find_all("input"):
            input_type = input_tag.attrs.get("type", "text")
            input_name = input_tag.attrs.get("name")
            input_value = input_tag.attrs.get("value", "")
            inputs.append({
                "type": input_type,
                "name": input_name,
                "value": input_value
            })
        form_details["action"] = action
        form_details["method"] = method
        form_details["inputs"] = inputs

        return form_details
    
    def vulnerable(self, response):
        errors = {"quoted string not properly terminated",
                  "unclosed quotation mark after the character string",
                  "you have an error in your sql syntax"}
        
        for error in errors:
            try:
                if error in response.content.decode().lower():
                    return True
            except UnicodeDecodeError:
                print(f'[+]Error: cannot decode the response')
        return False
    
    def scan(self):
        forms = self.get_forms()
        logger.info(f"Detected {len(forms)} forms on {self.url}.")

        for form in forms:
            details = self.form_details(form)
            # logger.info(f"Form details: {details}")
            payloads = ["'", '"', "' OR '1'='1", '" OR "1"="1', "'--", '"--']
            
            for payload in payloads:
                data = {}
                for input_tag in details["inputs"]:
                    if input_tag["type"] == "hidden" or input_tag["value"]:
                        data[input_tag['name']] = input_tag['value']
                    elif input_tag["type"] != "submit":
                        data[input_tag['name']] = f'test{payload}'

                form_action = details["action"]
                form_url = urljoin(self.url, form_action)

                try:
                    if details["method"] == "post":
                        res = self.session.post(form_url, data=data)
                    elif details["method"] == "get":
                        res = self.session.get(form_url, params=data)
                except requests.exceptions.RequestException as e:
                    logger.error(f"Error submitting form: {e}")
                    continue

                if self.vulnerable(res):
                    logger.info(f"SQL Injection attack vulnerable in link {form_url}")
                else:
                    logger.info(f"No SQL Injection vulnerability detected for form {form_url}")

if __name__ == "__main__":
    url_to_be_checked = "https://www..com/"
    scanner = SQLInjectionScanner(url_to_be_checked)
    scanner.scan()


















# import requests
# from bs4 import BeautifulSoup
# import sys
# from urllib.parse import urljoin

# s = requests.Session()
# s.headers["User-Agent"] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"

# # Function to find all forms
# def get_form(url):
#     soup = BeautifulSoup(s.get(url).content, "html.parser")
#     return soup.find_all("form")

# # Function that returns the full detail of each form fields
# def form_details(form):
#     formDetails = {}
#     action = form.attrs.get("action")
#     method = form.attrs.get("method", "get")
#     input = []

#     for input_tag in form.find_all("input"):
#         input_type = input_tag.attrs.get("type", "text")
#         input_name = input_tag.attrs.get("name")
#         input_value = input_tag.attrs.get("value", "")
#         input.append({
#             "type":input_type,
#             "name":input_name,
#             "value":input_value
#         })
#     formDetails["action"] = action
#     formDetails["method"] = method
#     formDetails["input"] = input

#     return formDetails

# def vulnerable(response):
#     errors = {"quoted string not properly terminated",
#              "unclosed quotation mark after the character string",
#              "you have an error in your sql syntax"}
    
#     for error in errors:
#         if error in response.content.decode().lower():
#             return True
#     return False

# def sql_injection_scan(url):
#     forms = get_form(url)
#     print(f"[+] Detected number of forms {len(forms)} forms on {url}.")

#     for form in forms:
#         details = form_details(form)
#     for i in "\"'":
#         data = {}
#         for input_tag in details["input"]:
#             if input_tag["type"] == "hidden" or input_tag["value"]:
#                 data[input_tag['name']] = input_tag['value']
#             elif input_tag["type"] != "submit":
#                 data[input_tag['name']] = f'test{i}'

#         print(url)
#         form_details(form)

#         if details["method"] == "post":
#             res = s.post(url, data=data)
#         elif details["method"] == "get":
#             res = s.get(url, params=data)
#         if vulnerable(res):
#             print(f"SQL Injection attack vulnerable in link {url}")
#         else:
#             print("No SQL Injection vulnerability detected")
#             break

# if __name__ == "__main__":
#     urlToBeChecked = "https://google.com"
#     sql_injection_scan(urlToBeChecked)
